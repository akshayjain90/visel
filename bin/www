#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
var fs = require('fs');

var dataDirectory = __dirname.split('visel')[0] + 'visel/data/';

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
//console.log(io);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind);
}


/*
 * Custom code starts here
 */
var dataFile = "";
var cluster2dpoints = require('./cluster2dpoints.js');
var props = require('./props.js').props;
var view={version:0};

var clientLevel = 1;
var clientCenterX =0;
var clientCenterY =0;
var allData;
var clusteredData;
var version =0;
var done =0;
function getInitData() {
    return "0.5 0.5"
}

function userOperation(op) {
    return "0.5 0.5"
}

io.on('connection', function (socket) {

    socket.on('state', function (msg) {

            view.version += 1;
            console.log("Recieved state from client " + JSON.stringify(msg));
            if (clusteredData && clusteredData.length > 0) {


                var levelsOnClient = msg.levelsOnClient;
                var i = -1;
                for (var j = 1; j <= msg.zoom + 2; j++) {
                    if (levelsOnClient.indexOf(j) == -1) {
                        i = j - 1;
                        break;
                    }
                }

                if (i != -1 && (done ==0 || i<=done)) {
                    var pointList = [];
                    console.log(clusteredData[i - 1].length);
                    for (var j = 0; j < clusteredData[i - 1].length; j++) {
                        if (clusteredData[i - 1][j].size > 1) {
                            pointList = pointList.concat(allData.filter(function (value, index) {
                                if (clusteredData[i - 1][j].lLevelIdList.indexOf(value.id) > -1)
                                    return true;
                                else
                                    return false;
                            }));

                        }
                    }


                    //console.log("alldata length " +allData.length);

                    console.log("pointlist length " + pointList.length + "props " + JSON.stringify(props));
                    cluster2dpoints.cluster2dpoints(pointList, props, i + 1, function (res) {
                        console.log(" result length " + res[0].length);
                        if (res[0].length > 0) {

                            clusteredData[i] = res[0];
                            cluster2dpoints.getView(clusteredData[i], 1, [msg.xDisp, msg.yDisp], function (res) {
                                var newView={};
                                newView.version = view.version;
                                newView.level = i + 1;
                                newView.data = res;
                                //console.log("viewwwww " + JSON.stringify(view));
                                //console.log("level " + view.level + " size " + clusteredData[i].length);
                                io.emit('newData', newView);
                            });
                        }

                        if(clusteredData[i].filter(function (value){
                            if(value.size>1)
                                return true;
                            return false;
                        }) ==0)
                            done =i;
                    });
                }

            }

    });

    socket.on('getParameters', function () {
        socket.emit('parameters', sendParameters());
    });

    function sendParameters() {
        return props;
    }

    socket.on('updateParameters', function (msg) {
        props = msg;
        sendPresentView();
    });

    socket.on('getDataFiles', function () {
        console.log("Recieved data files name list request from client ");
        var dataFileNames = fs.readdirSync(dataDirectory).join(" ");
        console.log(dataFileNames);
        io.emit('dataFiles', dataFileNames);
    });

    function sendInitData(fileName) {
        dataFile = fileName;
        fs.readFile(dataDirectory + fileName, function (err, data) {
            cluster2dpoints.getAllData(data, props, function(res){
                allData = res;
                cluster2dpoints.cluster2dpoints(allData, props, 1, function (res) {
                    clusteredData = res;
                    //console.log("clustered data: " + JSON.stringify(clusteredData));
                    cluster2dpoints.getView(clusteredData[0], 1, [500,500],function(res){
                        view.data = res;
                        view.coordRanges = cluster2dpoints.getCoordRanges();
                        //console.log("view " + view);
                        socket.emit("InitData", view);
                    });

                });
            })

        });
    }

    //Needs lot of changes
    function sendPresentView() {
        fileName = dataFile;
        fs.readFile(dataDirectory + fileName, function (err, data) {
            cluster2dpoints.getAllData(data, props, function(res){
                allData = res;
                cluster2dpoints.cluster2dpoints(allData, props, 1, function (res) {
                    clusteredData = res;
                    //console.log("clustered data: " + JSON.stringify(clusteredData));
                    cluster2dpoints.getView(clusteredData[0], 1, [500,500],function(res){
                        view.data = res;
                        view.coordRanges = cluster2dpoints.getCoordRanges();
                        //console.log("view " + view);
                        socket.emit("InitData", view);
                    });

                });
            })

        });
    }

    socket.on('selectDataFile', function (fileName) {
        console.log("File selected: " + fileName);
        sendInitData(fileName);
    });


    socket.on('getNetDImage', function () {
	    var publicDirectory = __dirname.split('visel')[0] + 'visel/public';
        fs.readFileSync(publicDirectory + '/images/902kb.jpg', function (err, buf) {
            socket.emit('NetDImage', {image: buf});
            console.log("Emmited image file");
        });
    })


});


